#ifndef AUDIO_ENCODER_HH
#define AUDIO_ENCODER_HH

extern "C" {
#include <opus/opus.h>
}

#include <deque>
#include <map>
#include <memory>
#include <optional>

#include "opus_wrapper.hh
#include "protocol.hh"
#include "file_descriptor.hh" 

using namespace std;
using namespace chrono;

class AudioEncoder
{
public:
  // initialize an Opus encoder
  AudioEncoder(opus_int32 sample_rate, int num_channels, 
                int application, int expected_loss_percent = 0)
    : encoder_(sample_rate, num_channels, application, expected_loss_percent) {};

  // encode raw audio and packetize into datagrams
  void compress_frame(const std::vector<opus_int16>& raw_audio, int frame_size);

  // add a transmitted but unacked datagram (except retransmissions) to unacked
  void add_unacked(const AudioDatagram & datagram);
  void add_unacked(AudioDatagram && datagram);

  // handle ACK
  void handle_ack(const std::shared_ptr<AckMsg> & ack);

  // output stats every second and reset some of them
  void output_periodic_stats();

  // accessors
  uint32_t frame_id() const { return frame_id_; }
  std::deque<AudioDatagram> & send_buf() { return send_buf_; }
  std::map<SeqNum, AudioDatagram> & unacked() { return unacked_; }

  // mutators
  void set_verbose(const bool verbose) { verbose_ = verbose; }
  void set_target_bitrate(const unsigned int bitrate_kbps);

  // forbid copying and moving
  AudioEncoder(const AudioEncoder & other) = delete;
  const AudioEncoder & operator=(const AudioEncoder & other) = delete;
  AudioEncoder(AudioEncoder && other) = delete;
  AudioEncoder & operator=(AudioEncoder && other) = delete;

private:
  // Opus encoding object
  opus::Encoder encoder_;

  // print debugging info
  bool verbose_ {false};

  // current target bitrate
  unsigned int target_bitrate_ {0};

  // frame ID to encode
  uint32_t frame_id_ {0};

  // queue of datagrams (packetized audio frames) to send
  std::deque<AudioDatagram> send_buf_ {};

  // unacked datagrams
  std::map<SeqNum, AudioDatagram> unacked_ {};

  // RTT-related
  std::optional<unsigned int> min_rtt_us_ {};
  std::optional<double> ewma_rtt_us_ {};
  static constexpr double ALPHA = 0.2;

  // performance stats
  unsigned int num_encoded_frames_ {0};
  double total_encode_time_ms_ {0.0};
  double max_encode_time_ms_ {0.0};

  // constants
  static constexpr unsigned int MAX_NUM_RTX = 3;
  static constexpr uint64_t MAX_UNACKED_US = 1000 * 1000; // 1 second

  // track RTT
  void add_rtt_sample(const unsigned int rtt_us);

  // encode the raw frame stored in 'raw_audio'
  void encode_frame(const std::vector<opus_int16>& raw_audio, int frame_size);

  // packetize the just encoded frame and return its size
  size_t packetize_encoded_frame();
};